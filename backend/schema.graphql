type Query implements Node {
  id: ID!
  page(
    """The ID of the object"""
    id: ID!
  ): Page
  allPages(offset: Int, before: String, after: String, first: Int, last: Int, url: String): PageConnection
  revision(
    """The ID of the object"""
    id: ID!
  ): Revision
  allRevisions(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
    type: RevisionType
    contentType: ID
    objectId: Int
    author: ID

    """Ordering"""
    orderBy: String
  ): RevisionConnection
  viewer: Query
  node(
    """The ID of the object"""
    id: ID!
  ): Node
  _debug: DjangoDebug
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

type Page implements Node & RevisionedType {
  """The ID of the object"""
  id: ID!
  revision: Revision
  isDeleted: Boolean!
  title: String!
  url: String!
  body: String!
  publishedAt: DateTime
  revisions(offset: Int, before: String, after: String, first: Int, last: Int): RevisionConnection
}

interface RevisionedType {
  revision: Revision
  revisions(offset: Int, before: String, after: String, first: Int, last: Int): RevisionConnection
}

type Revision implements Node {
  """The ID of the object"""
  id: ID!
  type: RevisionType
  parent: Revision
  objectId: Int
  author: User
  authorIp: String
  authorUseragent: String
  message: String
  createdAt: DateTime!
  revisionSet(offset: Int, before: String, after: String, first: Int, last: Int, type: RevisionType): RevisionConnection!
  page: Page
  pagerevisionSet(offset: Int, before: String, after: String, first: Int, last: Int, url: String): PageConnection!
  after(offset: Int, before: String, after: String, first: Int, last: Int): RevisionConnection
  before: Revision
  contentObject: VersionedType
  typeDisplay: String
  isTip: Boolean
}

enum RevisionType {
  """Create"""
  CREATE

  """Update"""
  UPDATE

  """Delete"""
  DELETE
}

type User implements Node {
  """The ID of the object"""
  id: ID!
  lastLogin: DateTime

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!
  firstName: String!
  lastName: String!
  email: String!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!
  dateJoined: DateTime!
  revisions(offset: Int, before: String, after: String, first: Int, last: Int, type: RevisionType): RevisionConnection!
  isAuthenticated: Boolean
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type RevisionConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [RevisionEdge]!
  totalCount: Int
  edgeCount: Int
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `Revision` and its cursor."""
type RevisionEdge {
  """The item at the end of the edge"""
  node: Revision

  """A cursor for use in pagination"""
  cursor: String!
}

type PageConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PageEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `Page` and its cursor."""
type PageEdge {
  """The item at the end of the edge"""
  node: Page

  """A cursor for use in pagination"""
  cursor: String!
}

union VersionedType = Page

"""Debugging information for the current query."""
type DjangoDebug {
  """Executed SQL queries for this API query."""
  sql: [DjangoDebugSQL]

  """Raise exceptions for this API query."""
  exceptions: [DjangoDebugException]
}

"""Represents a single database query made to a Django managed DB."""
type DjangoDebugSQL {
  """The type of database being used (e.g. postrgesql, mysql, sqlite)."""
  vendor: String!

  """The Django database alias (e.g. 'default')."""
  alias: String!

  """The actual SQL sent to this database."""
  sql: String

  """Duration of this database query in seconds."""
  duration: Float!

  """The raw SQL of this query, without params."""
  rawSql: String!

  """JSON encoded database query parameters."""
  params: String!

  """Start time of this database query."""
  startTime: Float!

  """Stop time of this database query."""
  stopTime: Float!

  """Whether this database query took more than 10 seconds."""
  isSlow: Boolean!

  """Whether this database query was a SELECT."""
  isSelect: Boolean!

  """Postgres transaction ID if available."""
  transId: String

  """Postgres transaction status if available."""
  transStatus: String

  """Postgres isolation level if available."""
  isoLevel: String

  """Postgres connection encoding if available."""
  encoding: String
}

"""Represents a single exception raised."""
type DjangoDebugException {
  """The class of the exception"""
  excType: String!

  """The message of the exception"""
  message: String!

  """The stack trace"""
  stack: String!
}

type Mutation {
  pageCreate(input: PageCreateInput!): PageCreatePayload
  pageUpdate(input: PageUpdateInput!): PageUpdatePayload
  pageDelete(input: PageDeleteInput!): PageDeletePayload
}

type PageCreatePayload {
  page: Page
  clientMutationId: String
}

input PageCreateInput {
  page: PageInput!
  clientMutationId: String
}

input PageInput {
  title: String!
  url: String!
  body: String!
}

type PageUpdatePayload {
  page: Page
  clientMutationId: String
}

input PageUpdateInput {
  id: ID!
  page: PageInput!
  clientMutationId: String
}

type PageDeletePayload {
  deletedID: ID!
  clientMutationId: String
}

input PageDeleteInput {
  id: ID!
  clientMutationId: String
}